globals().update({'D': print, 'g':globals(),'_N': (lambda *q,**cnr: range(q[0],q[1]+1,q[2]if 3<=len(q) else 1)), **{'{}M'.format(_A.upper()): __import__(_A) for _A in str.split('sys,math,re', ',')}}) or((g.__setitem__('_T', list(_N(1, int(SYSM.argv[1]))))or not list(map(lambda i:_T[1-i] is not None and list(map(lambda j: _T.__setitem__(-1+j, None), _N(i+i,int(SYSM.argv[1])+ 0 ,i))), _N(2, MATHM.ceil(MATHM.sqrt(int(SYSM.argv[1]))),)   )  ) or g.__setitem__('_i', iter(((D(o, end=' ') if o != 1 and o else None) or _i for o in _T))) or exec(('while True:\n'+' '*4+'try:\n'+' '*8+'next(%s)\n'+' '*4+'except StopIteration:\n'+' '*8+'break\n') % '_i') or print()) if len(SYSM.argv) > 1 and REM.match(r'^\d+$', SYSM.argv[0+1]) and int(SYSM.argv[1])>0 else D('Usage: python3 '+ SYSM.argv[0]+ ' NUMBER\nNUMBER must be a positive integer more than 0.'))